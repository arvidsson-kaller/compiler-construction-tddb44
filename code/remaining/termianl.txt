g++ -MM -std=c++11 -ggdb3 -Wall -Woverloaded-virtual -pedantic -pie symbol.cc symtab.cc ast.cc semantic.cc optimize.cc quads.cc codegen.cc error.cc main.cc > Makefile.dependencies
g++ -std=c++11 -ggdb3 -Wall -Woverloaded-virtual -pedantic -pie -c codegen.cc
g++ -o compiler symbol.o symtab.o ast.o semantic.o optimize.o quads.o codegen.o error.o main.o parser.o scanner.o 
./diesel -y ./codetest1.d 2>&1 | diff -ub ../trace/codetest1.trace -
--- ../trace/codetest1.trace	2023-11-26 19:03:09.778812942 +0100
+++ -	2023-11-29 10:02:20.831964316 +0100
@@ -1,10 +1,10 @@
 Symbol table will be printed after compilation.
 Generating assembler for procedure "WRITE_INT"
 Generating assembler, global level
-7GLOBAL.4VOID7INTEGER4REAL4READ5WRITE7INT-ARG5TRUNC8REAL-ARG4MAIN9WRITE_INT3VAL6ASCII05MINUS1C3BUF4BUFP8$1      8$2      8$3      8$4      8$5      8$6      8$7      8$8      8$9      8$10     8$11     8$12     8$13     8$14     8$15     8$16     8$17     8$18     8$19     8$20     8$21     8$22     
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------^ (pool_pos = 301)
+7GLOBAL.4VOID7INTEGER4REAL4READ5WRITE7INT-ARG5TRUNC8REAL-ARG4MAIN9WRITE_INT3VAL6ASCII05MINUS1C3BUF4BUFP7$1     7$2     7$3     7$4     7$5     7$6     7$7     7$8     7$9     7$10    7$11    7$12    7$13    7$14    7$15    7$16    7$17    7$18    7$19    7$20    7$21    7$22    7$23    7$24    7$25    
+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------^ (pool_pos = 303)
 
-Symbol table (size = 38):
+Symbol table (size = 41):
 Pos  Name      Lev Hash Back Offs Type      Tag
 -----------------------------------------------
   0: GLOBAL.     0   -1  159    0 GLOBAL.   SYM_PROC      lbl = -1 ar_size = 0  
@@ -17,32 +17,42 @@
   7: TRUNC       0   -1  332    0 INTEGER   SYM_FUNC      lbl = 2  ar_size = 0  
   8: REAL-ARG    0   -1  427    0 REAL      SYM_PARAM     
   9: MAIN        0   -1  357    0 VOID      SYM_PROC      lbl = 3  ar_size = 8  
- 10: WRITE_INT   1   -1  245    0 VOID      SYM_PROC      lbl = 4  ar_size = 264
+ 10: WRITE_INT   1   -1  245    0 VOID      SYM_PROC      lbl = 4  ar_size = 288
  11: VAL         2   -1  131    0 INTEGER   SYM_PARAM     
  12: ASCII0      2   -1   57    0 INTEGER   SYM_CONST     value = 48
  13: MINUS       2   -1  396    0 INTEGER   SYM_CONST     value = 45
  14: C           2   -1   67    0 INTEGER   SYM_VAR       
  15: BUF         2   -1  509    8 INTEGER   SYM_ARRAY     card = 10  
  16: BUFP        2   -1  493   88 INTEGER   SYM_VAR       
- 17: $1          2   -1  341   96 INTEGER   SYM_VAR       
- 18: $2          2   -1   22  104 INTEGER   SYM_VAR       
- 19: $3          2   -1  215  112 INTEGER   SYM_VAR       
- 20: $4          2   -1  408  120 INTEGER   SYM_VAR       
- 21: $5          2   -1   89  128 INTEGER   SYM_VAR       
- 22: $6          2   -1  282  136 INTEGER   SYM_VAR       
- 23: $7          2   -1  475  144 INTEGER   SYM_VAR       
- 24: $8          2   -1  156  152 INTEGER   SYM_VAR       
- 25: $9          2   -1  349  160 INTEGER   SYM_VAR       
- 26: $10         2   -1  357  168 INTEGER   SYM_VAR       
- 27: $11         2   -1    6  176 INTEGER   SYM_VAR       
- 28: $12         2   -1  167  184 INTEGER   SYM_VAR       
- 29: $13         2   -1  328  192 INTEGER   SYM_VAR       
- 30: $14         2   -1  489  200 INTEGER   SYM_VAR       
- 31: $15         2   -1  138  208 INTEGER   SYM_VAR       
- 32: $16         2   -1  299  216 INTEGER   SYM_VAR       
- 33: $17         2   -1  460  224 INTEGER   SYM_VAR       
- 34: $18         2   -1  109  232 INTEGER   SYM_VAR       
- 35: $19         2   -1  270  240 INTEGER   SYM_VAR       
- 36: $20         2   -1   38  248 INTEGER   SYM_VAR       
- 37: $21         2   -1  199  256 INTEGER   SYM_VAR       
- 38: $22         1   -1  360    0 INTEGER   SYM_VAR       
+ 17: $1          2   -1  149   96 INTEGER   SYM_VAR       
+ 18: $2          2   -1  310  104 INTEGER   SYM_VAR       
+ 19: $3          2   -1  471  112 INTEGER   SYM_VAR       
+ 20: $4          2   -1  120  120 INTEGER   SYM_VAR       
+ 21: $5          2   -1  281  128 INTEGER   SYM_VAR       
+ 22: $6          2   -1  442  136 INTEGER   SYM_VAR       
+ 23: $7          2   -1   91  144 INTEGER   SYM_VAR       
+ 24: $8          2   -1  252  152 INTEGER   SYM_VAR       
+ 25: $9          2   -1  413  160 INTEGER   SYM_VAR       
+ 26: $10         2   -1  165  168 INTEGER   SYM_VAR       
+ 27: $11         2   -1  294  176 INTEGER   SYM_VAR       
+ 28: $12         2   -1  423  184 INTEGER   SYM_VAR       
+ 29: $13         2   -1   40  192 INTEGER   SYM_VAR       
+ 30: $14         2   -1  169  200 INTEGER   SYM_VAR       
+ 31: $15         2   -1  298  208 INTEGER   SYM_VAR       
+ 32: $16         2   -1  427  216 INTEGER   SYM_VAR       
+ 33: $17         2   -1   44  224 INTEGER   SYM_VAR       
+ 34: $18         2   -1  173  232 INTEGER   SYM_VAR       
+ 35: $19         2   -1  302  240 INTEGER   SYM_VAR       
+ 36: $20         2   -1  326  248 INTEGER   SYM_VAR       
+ 37: $21         2   -1  455  256 INTEGER   SYM_VAR       
+ 38: $22         2   -1   72  264 INTEGER   SYM_VAR       
+ 39: $23         2   -1  201  272 INTEGER   SYM_VAR       
+ 40: $24         2   -1  330  280 INTEGER   SYM_VAR       
+ 41: $25         1   -1  459    0 INTEGER   SYM_VAR       
+/tmp/diesel-g95vGFeDwJ.s: Assembler messages:
+/tmp/diesel-g95vGFeDwJ.s:54: Error: invalid character (0xf0) in mnemonic
+/tmp/diesel-g95vGFeDwJ.s:184: Error: invalid use of register
+/tmp/diesel-g95vGFeDwJ.s:262: Error: invalid use of register
+/tmp/diesel-g95vGFeDwJ.s:277: Error: invalid character (0xf0) in mnemonic
+[00;31m[1mThe d.out file is causing the errors!(B[m[00m
+rm: cannot remove '/tmp/diesel-Pn3zA4N0Ts.o': No such file or directory
diff -ub ../trace/codetest1.dout d.out
--- ../trace/codetest1.dout	2023-11-26 19:03:09.778812942 +0100
+++ d.out	2023-11-29 10:02:20.832567722 +0100
@@ -1,219 +1,227 @@
+ðŸ˜ŽPROLOGUE 
 L4:			# WRITE_INT
 		push	rbp
 		mov	rcx, rsp
 		push	[rbp-8]
 		push	rcx
 		mov	rbp, rcx
-		sub	rsp, 264
+		sub	rsp, 288
 		mov	rax, 0
 		mov	rcx, [rbp-16]
-		mov	[rcx-120], rax
+		mov	[rcx+96], rax
 		mov	rcx, [rbp-16]
-		mov	rax, [rcx+16]
+		mov	rax, [rcx+0]
 		mov	rcx, [rbp-16]
-		mov	rcx, [rcx-120]
+		mov	rcx, [rcx+96]
 		cmp	rax, rcx
-		je	L12
+		je	L14
 		mov	rax, 0
-		jmp	L13
-		L12:
+		jmp	L15
+		L14:
 		mov	rax, 1
-		L13:
+		L15:
 		mov	rcx, [rbp-16]
-		mov	[rcx-128], rax
+		mov	[rcx+104], rax
 		mov	rcx, [rbp-16]
-		mov	rax, [rcx-128]
+		mov	rax, [rcx+104]
 		cmp	rax, 0
 		je	L6
 		mov	rax, 48
+		mov	rcx, [rbp-16]
+		mov	[rcx+112], rax
+		mov	rcx, [rbp-16]
+		mov	rax, [rcx+112]
 		push	rax
-		call	L1	# WRITE
-		add	rsp, 8
 		jmp	L5
+		jmp	L7
 L6:
+L7:
 		mov	rax, 0
 		mov	rcx, [rbp-16]
-		mov	[rcx-136], rax
+		mov	[rcx+120], rax
 		mov	rcx, [rbp-16]
-		mov	rax, [rcx+16]
+		mov	rax, [rcx+0]
 		mov	rcx, [rbp-16]
-		mov	rcx, [rcx-136]
+		mov	rcx, [rcx+120]
 		cmp	rax, rcx
-		jl	L14
+		jl	L16
 		mov	rax, 0
-		jmp	L15
-		L14:
+		jmp	L17
+		L16:
 		mov	rax, 1
-		L15:
+		L17:
 		mov	rcx, [rbp-16]
-		mov	[rcx-144], rax
+		mov	[rcx+128], rax
 		mov	rcx, [rbp-16]
-		mov	rax, [rcx-144]
+		mov	rax, [rcx+128]
 		cmp	rax, 0
-		je	L7
+		je	L8
 		mov	rax, 45
+		mov	rcx, [rbp-16]
+		mov	[rcx+136], rax
+		mov	rcx, [rbp-16]
+		mov	rax, [rcx+136]
 		push	rax
-		call	L1	# WRITE
-		add	rsp, 8
 		mov	rcx, [rbp-16]
-		mov	rax, [rcx+16]
+		mov	rax, [rcx+0]
 		neg	rax
 		mov	rcx, [rbp-16]
-		mov	[rcx-152], rax
+		mov	[rcx+144], rax
 		mov	rcx, [rbp-16]
-		mov	rax, [rcx-152]
+		mov	rax, [rcx+144]
 		mov	rcx, [rbp-16]
-		mov	[rcx+16], rax
-L7:
+		mov	[rcx+0], rax
+		jmp	L9
+L8:
+L9:
 		mov	rax, 0
 		mov	rcx, [rbp-16]
-		mov	[rcx-160], rax
+		mov	[rcx+152], rax
 		mov	rcx, [rbp-16]
-		mov	rax, [rcx-160]
+		mov	rax, [rcx+152]
 		mov	rcx, [rbp-16]
-		mov	[rcx-112], rax
-L8:
+		mov	[rcx+88], rax
+L10:
 		mov	rax, 0
 		mov	rcx, [rbp-16]
-		mov	[rcx-168], rax
+		mov	[rcx+160], rax
 		mov	rcx, [rbp-16]
-		mov	rax, [rcx+16]
+		mov	rax, [rcx+0]
 		mov	rcx, [rbp-16]
-		mov	rcx, [rcx-168]
+		mov	rcx, [rcx+160]
 		cmp	rax, rcx
-		jg	L16
+		jg	L18
 		mov	rax, 0
-		jmp	L17
-		L16:
+		jmp	L19
+		L18:
 		mov	rax, 1
-		L17:
+		L19:
 		mov	rcx, [rbp-16]
-		mov	[rcx-176], rax
+		mov	[rcx+168], rax
 		mov	rcx, [rbp-16]
-		mov	rax, [rcx-176]
+		mov	rax, [rcx+168]
 		cmp	rax, 0
-		je	L9
+		je	L11
 		mov	rax, 10
 		mov	rcx, [rbp-16]
-		mov	[rcx-184], rax
+		mov	[rcx+176], rax
 		mov	rcx, [rbp-16]
-		mov	rax, [rcx+16]
+		mov	rax, [rcx+0]
 		mov	rcx, [rbp-16]
-		mov	rcx, [rcx-184]
+		mov	rcx, [rcx+176]
 		cqo
 		idiv	rax, rcx
 		mov	rcx, [rbp-16]
-		mov	[rcx-192], rdx
+		mov	[rcx+184], rdx
 		mov	rcx, [rbp-16]
-		mov	rax, [rcx-192]
+		mov	rax, [rcx+184]
 		mov	rcx, [rbp-16]
-		mov	[rcx-24], rax
+		mov	[rcx+0], rax
+		mov	rax, 48
 		mov	rcx, [rbp-16]
-		mov	rax, [rcx-24]
-		mov	rcx, 48
-		add	rax, rcx
+		mov	[rcx+192], rax
+		mov	rcx, [rbp-16]
+		mov	rax, [rcx+0]
 		mov	rcx, [rbp-16]
-		mov	[rcx-200], rax
+		mov	rcx, [rcx+192]
+		add	rax, rcx
 		mov	rcx, [rbp-16]
-		sub	rcx, 32
-		mov	rax, rcx
+		mov	[rcx+200], rax
 		mov	rcx, [rbp-16]
-		mov	rcx, [rcx-112]
+		mov	rax, rcx+8		mov	rcx, [rbp-16]
+		mov	rcx, [rcx+88]
 		imul	rcx, 8
 		sub	rax, rcx
 		mov	rcx, [rbp-16]
-		mov	[rcx-208], rax
+		mov	[rcx+208], rax
 		mov	rcx, [rbp-16]
-		mov	rax, [rcx-200]
+		mov	rax, [rcx+200]
 		mov	rcx, [rbp-16]
-		mov	rcx, [rcx-208]
+		mov	rcx, [rcx+208]
 		mov	[rcx], rax
 		mov	rax, 1
 		mov	rcx, [rbp-16]
-		mov	[rcx-216], rax
+		mov	[rcx+216], rax
 		mov	rcx, [rbp-16]
-		mov	rax, [rcx-112]
+		mov	rax, [rcx+88]
 		mov	rcx, [rbp-16]
-		mov	rcx, [rcx-216]
+		mov	rcx, [rcx+216]
 		add	rax, rcx
 		mov	rcx, [rbp-16]
-		mov	[rcx-224], rax
+		mov	[rcx+224], rax
 		mov	rcx, [rbp-16]
-		mov	rax, [rcx-224]
+		mov	rax, [rcx+224]
 		mov	rcx, [rbp-16]
-		mov	[rcx-112], rax
+		mov	[rcx+88], rax
 		mov	rax, 10
 		mov	rcx, [rbp-16]
-		mov	[rcx-232], rax
+		mov	[rcx+232], rax
 		mov	rcx, [rbp-16]
-		mov	rax, [rcx+16]
+		mov	rax, [rcx+0]
 		mov	rcx, [rbp-16]
-		mov	rcx, [rcx-232]
+		mov	rcx, [rcx+232]
 		cqo
 		idiv	rax, rcx
 		mov	rcx, [rbp-16]
-		mov	[rcx-240], rax
+		mov	[rcx+240], rax
 		mov	rcx, [rbp-16]
-		mov	rax, [rcx-240]
+		mov	rax, [rcx+240]
 		mov	rcx, [rbp-16]
-		mov	[rcx+16], rax
-		jmp	L8
-L9:
-L10:
+		mov	[rcx+0], rax
+		jmp	L10
+L11:
+L12:
 		mov	rax, 0
 		mov	rcx, [rbp-16]
-		mov	[rcx-248], rax
+		mov	[rcx+248], rax
 		mov	rcx, [rbp-16]
-		mov	rax, [rcx-112]
+		mov	rax, [rcx+88]
 		mov	rcx, [rbp-16]
-		mov	rcx, [rcx-248]
+		mov	rcx, [rcx+248]
 		cmp	rax, rcx
-		jg	L18
+		jg	L20
 		mov	rax, 0
-		jmp	L19
-		L18:
+		jmp	L21
+		L20:
 		mov	rax, 1
-		L19:
+		L21:
 		mov	rcx, [rbp-16]
-		mov	[rcx-256], rax
+		mov	[rcx+256], rax
 		mov	rcx, [rbp-16]
-		mov	rax, [rcx-256]
+		mov	rax, [rcx+256]
 		cmp	rax, 0
-		je	L11
+		je	L13
 		mov	rax, 1
 		mov	rcx, [rbp-16]
-		mov	[rcx-264], rax
+		mov	[rcx+264], rax
 		mov	rcx, [rbp-16]
-		mov	rax, [rcx-112]
+		mov	rax, [rcx+88]
 		mov	rcx, [rbp-16]
-		mov	rcx, [rcx-264]
+		mov	rcx, [rcx+264]
 		sub	rax, rcx
 		mov	rcx, [rbp-16]
-		mov	[rcx-272], rax
-		mov	rcx, [rbp-16]
-		mov	rax, [rcx-272]
+		mov	[rcx+272], rax
 		mov	rcx, [rbp-16]
-		mov	[rcx-112], rax
+		mov	rax, [rcx+272]
 		mov	rcx, [rbp-16]
-		sub	rcx, 32
-		mov	rax, rcx
+		mov	[rcx+88], rax
 		mov	rcx, [rbp-16]
-		mov	rcx, [rcx-112]
+		mov	rax, rcx+8		mov	rcx, [rbp-16]
+		mov	rcx, [rcx+88]
 		imul	rcx, 8
 		sub	rax, rcx
 		mov	rax, [rax]
 		mov	rcx, [rbp-16]
-		mov	[rcx-280], rax
+		mov	[rcx+280], rax
 		mov	rcx, [rbp-16]
-		mov	rax, [rcx-280]
+		mov	rax, [rcx+280]
 		push	rax
-		call	L1	# WRITE
-		add	rsp, 8
-		jmp	L10
-L11:
+		jmp	L12
+L13:
 L5:
 		leave
 		ret
+ðŸ˜ŽPROLOGUE 
 L3:			# MAIN
 		push	rbp
 		mov	rcx, rsp
@@ -222,12 +230,10 @@
 		sub	rsp, 8
 		mov	rax, 23
 		mov	rcx, [rbp-8]
-		mov	[rcx-16], rax
+		mov	[rcx+0], rax
 		mov	rcx, [rbp-8]
-		mov	rax, [rcx-16]
+		mov	rax, [rcx+0]
 		push	rax
-		call	L4	# WRITE_INT
-		add	rsp, 8
-L20:
+L22:
 		leave
 		ret
